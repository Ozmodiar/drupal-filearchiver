<?php

/**
 * Implements hook_theme().
 */
function filearchiver_theme() {
  return array(
    'filearchiver_link' => array(
      'variables' => array('file' => NULL, 'icon_directory' => NULL),
    ),
    'filearchiver_formatter_table' => array(
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function filearchiver_field_formatter_info() {
  return array(
    'filearchiver_default' => array(
      'label' => t('Generic file (with archive)'),
      'field types' => array('file'),
    ),
    'filearchiver_table' => array(
      'label' => t('Table of files (with archive)'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function filearchiver_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'filearchiver_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'filearchiver_link',
          '#file' => (object) $item,
        );
      }
      break;

    case 'filearchiver_table':
      if (!empty($items)) {
        $element[0] = array(
          '#theme' => 'filearchiver_formatter_table',
          '#items' => $items,
        );
      }
      break;
  }

  return $element;
}

/**
 * Returns HTML for a link to a file.
 *
 * @param $variables
 *   An associative array containing:
 *   - file: A file object to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "file_icon_directory" variable.
 *
 * @ingroup themeable
 */
function theme_filearchiver_link($variables) {
  $file = $variables['file'];
  $icon_directory = $variables['icon_directory'];

  $url = file_create_url($file->uri);
  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ),
  );

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  return '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span> (zip)';
}

/**
 * @param $variables
 * @return string
 */
function theme_filearchiver_formatter_table($variables) {
  $header = array(t('Attachment'), t('Size'));
  $rows = array();
  foreach ($variables['items'] as $delta => $item) {
    $rows[] = array(
      theme('file_link', array('file' => (object) $item)),
      format_size($item['filesize']),
    );
  }
  $rows[] = array(
    t('Download all files at once'), //@todo: make this text configurable.
    '1337 KB',
  );

  return empty($rows) ? '' : theme('table', array('header' => $header, 'rows' => $rows));
}


/**
 * Implements hook_form_alter().
 */
function filearchiver_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'page_node_form') {
    $form['#submit'][] = '_filearchiver_submit_handler';
  }
}

/**
 * Get file from field_file, archive and store in specific folder.
 */
function _filearchiver_submit_handler($form, &$form_state) {
  // Delete an already existing archive with the same name.
  $realpath = drupal_realpath('public://') . '/archives/filename.zip';
  if (file_exists($realpath)) {
    unlink($realpath);
  }

  $file_path = variable_get('file_private_path', conf_path() . '/files');
  $archive_path = $file_path . '/archives/filename.zip';
  $archive = new ZipArchive();
  $res = $archive->open($archive_path, ZipArchive::CREATE);
  if ($res === TRUE) {
    $fid = $form_state['values']['field_file'][$form['field_file']['#language']][0]['fid'];
    $file = file_load($fid);
    if (!$archive->addFile(drupal_realpath($file->uri), $file->filename)) {
      watchdog('filearchiver', $file->uri . ' was not added to the archive');
    }
    $archive->close();
  }
}
